#!/usr/bin/python

import sys
import argparse
import re
import os

parser = argparse.ArgumentParser(description='Parse a LaTeX document to extract all dependencies')

parser.add_argument('-f', '--format', dest='format', choices=['makefile','plain'],
				default='makefile', help='Output type')
parser.add_argument('-m', '--makefile', dest='makefile', action='store_true',
				help='Output dependencies for the given file in makefile format')
parser.add_argument('input', type=argparse.FileType('r'),  
	help='Input LaTeX file.')
parser.add_argument('output', nargs='?', type=argparse.FileType('w'), default=sys.stdout,
	help='Ouput file.')

args = parser.parse_args()

def open_and_parse_deps(fname):
	try:
		f = open(fname, "r")
		return parse_deps(f)
	except IOError:
		return []

fpath = ""

def parse_deps(f):
	contents = f.read()
	matches = re.finditer(r"\\(input|inputtikz){(.*)}", contents)
	deplist = []

	for match in matches:
		if match.group(1) == 'input':
			dep = match.group(2)
		elif match.group(1) == 'inputtikz':
			dep = 'tikzgen/' + match.group(2) + '.tgen.pdf'
		else:
			continue

		dep = fpath + '/' + dep

		deplist.append(dep)
		deplist += open_and_parse_deps(dep)

	return deplist

if __name__ == "__main__":
	frel = os.path.relpath(args.input.name)
	fpath = os.path.dirname(frel)	
	
	deplist = parse_deps(args.input)
	out = args.output

	if args.format == 'makefile':
		out.write(frel.replace('.tex', '.pdf') + ': ')
		strs = [x + ' ' for x in deplist]
		out.writelines(strs)
		out.write('\n')
	elif args.format == 'plain':
		strs = [x + '\n' for x in deplist]
		out.writelines(strs)
	else:
		print 'Format ' + args.format + ' not recognized.'

	out.close()

